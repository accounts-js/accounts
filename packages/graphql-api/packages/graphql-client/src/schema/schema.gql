type Tokens {
  refreshToken: String
  accessToken: String
}

type LoginResult {
  sessionId: String
  tokens: Tokens
}

type ImpersonateReturn {
  authorized: Boolean
  tokens: Tokens
  user: User
}

type User {
  id: ID!
  email: String
  username: String
}

input UserInput {
  id: ID
  email: String
  username: String
}

input CreateUserInput {
  username: String
  email: String
  password: String
  profile: CreateUserProfileInput
}

input CreateUserProfileInput {
  name: String
  firstName: String
  lastName: String
}

input AuthenticateParamsInput {
  # Twitter, Instagram
  access_token: String
  # Twitter
  access_token_secret: String
  # OAuth
  provider: String
  # Password
  password: String
  # Password
  user: UserInput
  # Two factor
  code: String
}

extend type Query {
  getUser(accessToken: String!): User
  twoFactorSecret: String
}

extend type Mutation {
  impersonate(accessToken: String!, username: String!): ImpersonateReturn
  refreshTokens(accessToken: String!, refreshToken: String!): LoginResult
  logout(accessToken: String!): Boolean

  # Example: Login with password
  # authenticate(serviceName: "password", params: {password: "<pw>", user: {email: "<email>"}})
  authenticate(
    serviceName: String!
    params: AuthenticateParamsInput!
  ): LoginResult

  # register returns the id corresponding db ids, such as number IDs, ObjectIDs or UUIDs
  register(user: CreateUserInput!): ID
  verifyEmail(token: String!): Boolean
  resetPassword(token: String!, newPassword: String!): Boolean
  sendVerificationEmail(email: String!): Boolean
  sendResetPasswordEmail(email: String!): Boolean
  changePassword(oldPassword: String!, newPassword: String!): Boolean
  twoFactorSet(secret: String!, code: String!): Boolean
  twoFactorUnset(code: String!): Boolean
}
